
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { useState, useEffect, createElement } from 'react';

function ThemeSwitcher({
  readMode
}) {
  const [theme, setTheme] = useState(() => {
    const currentTheme = localStorage.getItem("currentTheme");
    return currentTheme ? currentTheme : "system";
  });
  useEffect(() => {
    localStorage.setItem("currentTheme", theme);
    let newTheme = theme;
    if (newTheme === "system") {
      newTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }
    if (newTheme === "dark") {
      document.documentElement.style.setProperty("--theme", newTheme);
    } else {
      document.documentElement.style.removeProperty("--theme");
    }
  }, [theme]);
  const handleThemeChange = event => {
    const newTheme = event.target.value;

    // Use the View Transitions API if available
    if (document.startViewTransition) {
      document.startViewTransition(() => {
        setTheme(newTheme);
      });
    } else {
      setTheme(newTheme);
    }
  };
  if (readMode === false) {
    return createElement("form", {
      className: "widget-theme-switcher form-group"
    }, createElement("fieldset", null, createElement("label", {
      htmlFor: "theme-select",
      className: "sr-only"
    }, "Choose a theme"), createElement("select", {
      className: "form-control",
      id: "theme-select",
      name: "theme",
      onChange: handleThemeChange,
      value: theme
    }, createElement("option", {
      value: "system"
    }, "System"), createElement("option", {
      value: "light"
    }, "Light"), createElement("option", {
      value: "dark"
    }, "Dark"))));
  } else {
    return null;
  }
}

export { ThemeSwitcher };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhlbWVTd2l0Y2hlci5tanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9UaGVtZVN3aXRjaGVyLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuL3VpL1RoZW1lU3dpdGNoZXIuY3NzXCI7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBUaGVtZVN3aXRjaGVyKHsgcmVhZE1vZGUgfSkge1xuICAgIGNvbnN0IFt0aGVtZSwgc2V0VGhlbWVdID0gdXNlU3RhdGUoKCkgPT4ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGhlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImN1cnJlbnRUaGVtZVwiKTtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUaGVtZSA/IGN1cnJlbnRUaGVtZSA6IFwic3lzdGVtXCI7XG4gICAgfSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImN1cnJlbnRUaGVtZVwiLCB0aGVtZSk7XG4gICAgICAgIGxldCBuZXdUaGVtZSA9IHRoZW1lO1xuICAgICAgICBpZiAobmV3VGhlbWUgPT09IFwic3lzdGVtXCIpIHtcbiAgICAgICAgICAgIG5ld1RoZW1lID0gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLm1hdGNoZXMgPyBcImRhcmtcIiA6IFwibGlnaHRcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdUaGVtZSA9PT0gXCJkYXJrXCIpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tdGhlbWVcIiwgbmV3VGhlbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5KFwiLS10aGVtZVwiKTtcbiAgICAgICAgfVxuICAgIH0sIFt0aGVtZV0pO1xuXG4gICAgY29uc3QgaGFuZGxlVGhlbWVDaGFuZ2UgPSBldmVudCA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1RoZW1lID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXG4gICAgICAgIC8vIFVzZSB0aGUgVmlldyBUcmFuc2l0aW9ucyBBUEkgaWYgYXZhaWxhYmxlXG4gICAgICAgIGlmIChkb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5zdGFydFZpZXdUcmFuc2l0aW9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUaGVtZShuZXdUaGVtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRoZW1lKG5ld1RoZW1lKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhZE1vZGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJ3aWRnZXQtdGhlbWUtc3dpdGNoZXIgZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgICAgIDxmaWVsZHNldD5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJ0aGVtZS1zZWxlY3RcIiBjbGFzc05hbWU9XCJzci1vbmx5XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBDaG9vc2UgYSB0aGVtZVxuICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJ0aGVtZS1zZWxlY3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cInRoZW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVUaGVtZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGVtZX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInN5c3RlbVwiPlN5c3RlbTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImxpZ2h0XCI+TGlnaHQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkYXJrXCI+RGFyazwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJUaGVtZVN3aXRjaGVyIiwicmVhZE1vZGUiLCJ0aGVtZSIsInNldFRoZW1lIiwidXNlU3RhdGUiLCJjdXJyZW50VGhlbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwidXNlRWZmZWN0Iiwic2V0SXRlbSIsIm5ld1RoZW1lIiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInN0eWxlIiwic2V0UHJvcGVydHkiLCJyZW1vdmVQcm9wZXJ0eSIsImhhbmRsZVRoZW1lQ2hhbmdlIiwiZXZlbnQiLCJ0YXJnZXQiLCJ2YWx1ZSIsInN0YXJ0Vmlld1RyYW5zaXRpb24iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaHRtbEZvciIsImlkIiwibmFtZSIsIm9uQ2hhbmdlIl0sIm1hcHBpbmdzIjoiOzs7O0FBR08sU0FBU0EsYUFBYUEsQ0FBQztBQUFFQyxFQUFBQSxRQUFBQTtBQUFTLENBQUMsRUFBRTtFQUN4QyxNQUFNLENBQUNDLEtBQUssRUFBRUMsUUFBUSxD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
