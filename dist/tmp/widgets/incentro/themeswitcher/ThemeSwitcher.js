
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
define(['exports', 'react'], (function (exports, react) { 'use strict';

    function ThemeSwitcher({
      readMode
    }) {
      const [theme, setTheme] = react.useState(() => {
        const currentTheme = localStorage.getItem("currentTheme");
        return currentTheme ? currentTheme : "system";
      });
      react.useEffect(() => {
        localStorage.setItem("currentTheme", theme);
        let newTheme = theme;
        if (newTheme === "system") {
          newTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
        }
        if (newTheme === "dark") {
          document.documentElement.style.setProperty("--theme", newTheme);
        } else {
          document.documentElement.style.removeProperty("--theme");
        }
      }, [theme]);
      const handleThemeChange = event => {
        const newTheme = event.target.value;

        // Use the View Transitions API if available
        if (document.startViewTransition) {
          document.startViewTransition(() => {
            setTheme(newTheme);
          });
        } else {
          setTheme(newTheme);
        }
      };
      if (readMode === false) {
        return react.createElement("form", {
          className: "widget-theme-switcher form-group"
        }, react.createElement("fieldset", null, react.createElement("label", {
          htmlFor: "theme-select",
          className: "sr-only"
        }, "Choose a theme"), react.createElement("select", {
          className: "form-control",
          id: "theme-select",
          name: "theme",
          onChange: handleThemeChange,
          value: theme
        }, react.createElement("option", {
          value: "system"
        }, "System"), react.createElement("option", {
          value: "light"
        }, "Light"), react.createElement("option", {
          value: "dark"
        }, "Dark"))));
      } else {
        return null;
      }
    }

    exports.ThemeSwitcher = ThemeSwitcher;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhlbWVTd2l0Y2hlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL1RoZW1lU3dpdGNoZXIuanN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4vdWkvVGhlbWVTd2l0Y2hlci5jc3NcIjtcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFRoZW1lU3dpdGNoZXIoeyByZWFkTW9kZSB9KSB7XG4gICAgY29uc3QgW3RoZW1lLCBzZXRUaGVtZV0gPSB1c2VTdGF0ZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY3VycmVudFRoZW1lXCIpO1xuICAgICAgICByZXR1cm4gY3VycmVudFRoZW1lID8gY3VycmVudFRoZW1lIDogXCJzeXN0ZW1cIjtcbiAgICB9KTtcblxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY3VycmVudFRoZW1lXCIsIHRoZW1lKTtcbiAgICAgICAgbGV0IG5ld1RoZW1lID0gdGhlbWU7XG4gICAgICAgIGlmIChuZXdUaGVtZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgICAgICAgbmV3VGhlbWUgPSB3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIikubWF0Y2hlcyA/IFwiZGFya1wiIDogXCJsaWdodFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld1RoZW1lID09PSBcImRhcmtcIikge1xuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS10aGVtZVwiLCBuZXdUaGVtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCItLXRoZW1lXCIpO1xuICAgICAgICB9XG4gICAgfSwgW3RoZW1lXSk7XG5cbiAgICBjb25zdCBoYW5kbGVUaGVtZUNoYW5nZSA9IGV2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGhlbWUgPSBldmVudC50YXJnZXQudmFsdWU7XG5cbiAgICAgICAgLy8gVXNlIHRoZSBWaWV3IFRyYW5zaXRpb25zIEFQSSBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKGRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24pIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRoZW1lKG5ld1RoZW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGhlbWUobmV3VGhlbWUpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmIChyZWFkTW9kZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cIndpZGdldC10aGVtZS1zd2l0Y2hlciBmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgPGZpZWxkc2V0PlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRoZW1lLXNlbGVjdFwiIGNsYXNzTmFtZT1cInNyLW9ubHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIENob29zZSBhIHRoZW1lXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpZD1cInRoZW1lLXNlbGVjdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidGhlbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZVRoZW1lQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoZW1lfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwic3lzdGVtXCI+U3lzdGVtPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibGlnaHRcIj5MaWdodDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRhcmtcIj5EYXJrPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+XG4gICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlRoZW1lU3dpdGNoZXIiLCJyZWFkTW9kZSIsInRoZW1lIiwic2V0VGhlbWUiLCJ1c2VTdGF0ZSIsImN1cnJlbnRUaGVtZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJ1c2VFZmZlY3QiLCJzZXRJdGVtIiwibmV3VGhlbWUiLCJ3aW5kb3ciLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInJlbW92ZVByb3BlcnR5IiwiaGFuZGxlVGhlbWVDaGFuZ2UiLCJldmVudCIsInRhcmdldCIsInZhbHVlIiwic3RhcnRWaWV3VHJhbnNpdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJodG1sRm9yIiwiaWQiLCJuYW1lIiwib25DaGFuZ2UiXSwibWFwcGluZ3MiOiI7Ozs7SUFHTyxTQUFTQSxhQUFhQSxDQUFDO0lBQUVDLEVBQUFBLFFBQUFBO0lBQVMsQ0FBQyxFQUFFO01BQ3hDLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFQyxRQUFRLENB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
